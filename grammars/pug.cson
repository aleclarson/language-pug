name: "Pug"
scopeName: "source.pug"
fileTypes: ["pug", "jade"]
patterns: [
  {
    include: "#unbuffered_comments"
  }
  {
    include: "#buffered_comments"
  }
  {
    comment: "Doctype declaration."
    match: "^(!!!|doctype)(\\s*[a-zA-Z0-9-_]+)?"
    name: "comment.other.doctype.pug"
  }
  {
    include: "#unbuffered_code_block"
  }
  {
    comment: "Script tag with JavaScript code."
    begin: "^(\\s*)(script)(?=[.#\\(\\s])((?![^\\n]*type=)|(?=[^\\n]*type=['\"](text|application)/javascript['\"]))"
    beginCaptures:
      "2":
        name: "entity.name.tag.script.pug"
    end: "^(?!(\\1\\s)|\\s*$)"
    patterns: [
      {
        begin: "^(\\s*):(babel)(?=\\(|$)$"
        beginCaptures:
          "2":
            name: "constant.language.name.babel.filter.pug"
        end: "^(?!(\\1\\s)|\\s*$)"
        name: "source.babel.filter.pug"
        patterns: [
          {
            include: "#filter_args"
          }
          {
            include: "source.embedded.js.jsx"
          }
        ]
      }
      {
        begin: "^(\\s*):(coffee(-?script)?)(?=\\(|$)"
        beginCaptures:
          "2":
            name: "constant.language.name.coffeescript.filter.pug"
        end: "^(?!(\\1\\s)|\\s*$)"
        name: "source.coffeescript.filter.pug"
        patterns: [
          {
            include: "#filter_args"
          }
          {
            include: "source.coffee"
          }
        ]
      }
      {
        begin: "\\G(?=\\()"
        end: "$"
        name: "stuff.tag.script.pug"
        patterns: [
          {
            include: "#tag_attributes"
          }
        ]
      }
      {
        begin: "\\G(?=[.#])"
        end: "$"
        name: "stuff.tag.script.pug"
        patterns: [
          {
            include: "#complete_tag"
          }
        ]
      }
      {
        include: "source.js"
      }
    ]
  }
  {
    comment: "Script tag with CoffeeScript code."
    begin: "^(\\s*)(script)(?=[.#(\\s])(?=[^\\n]*type=['\"](?:(text|application)/)?(?:x-)?coffee(?:-script)?['\"])"
    beginCaptures:
      "2":
        name: "entity.name.tag.script.pug"
    end: "^(?!(\\1\\s)|\\s*$)"
    name: "source.script.pug"
    patterns: [
      {
        begin: "\\G(?=\\()"
        end: "$"
        name: "stuff.tag.script.pug"
        patterns: [
          {
            include: "#tag_attributes"
          }
        ]
      }
      {
        begin: "\\G(?=[.#])"
        end: "$"
        name: "stuff.tag.script.pug"
        patterns: [
          {
            include: "#complete_tag"
          }
        ]
      }
      {
        include: "source.coffee"
      }
    ]
  }
  {
    comment: "Style tag with CSS code."
    begin: "^(\\s*)(style)(?=[.#(\\s])((?![^\\n]*type=)|(?=[^\\n]*type=['\"](?:text/)?css['\"]))"
    beginCaptures:
      "2":
        name: "entity.name.tag.script.pug"
    end: "^(?!(\\1\\s)|\\s*$)"
    name: "source.script.pug"
    patterns: [
      {
        begin: "\\G(?=\\()"
        end: "$"
        name: "stuff.tag.style.pug"
        patterns: [
          {
            include: "#tag_attributes"
          }
        ]
      }
      {
        begin: "\\G(?=[.#])"
        end: "$"
        name: "stuff.tag.style.pug"
        patterns: [
          {
            include: "#complete_tag"
          }
        ]
      }
      {
        include: "source.css"
      }
    ]
  }
  {
    comment: "Style tag with SCSS code."
    begin: "^(\\s*)(style)(?=[.#(\\s])(?=[^\\n]*type=['\"](?:text/)?(?:x-)?scss['\"])"
    beginCaptures:
      "2":
        name: "entity.name.tag.script.pug"
    end: "^(?!(\\1\\s)|\\s*$)"
    name: "source.script.pug"
    patterns: [
      {
        begin: "\\G(?=\\()"
        end: "$"
        name: "stuff.tag.style.pug"
        patterns: [
          {
            include: "#tag_attributes"
          }
        ]
      }
      {
        begin: "\\G(?=[.#])"
        end: "$"
        name: "stuff.tag.style.pug"
        patterns: [
          {
            include: "#complete_tag"
          }
        ]
      }
      {
        include: "source.css.scss"
      }
      {
        include: "source.scss"
      }
    ]
  }
  {
    comment: "Style tag with SASS code."
    begin: "^(\\s*)(style)(?=[.#(\\s])(?=[^\\n]*type=['\"](?:text/)?(?:x-)?sass['\"])"
    beginCaptures:
      "2":
        name: "entity.name.tag.script.pug"
    end: "^(?!(\\1\\s)|\\s*$)"
    name: "source.script.pug"
    patterns: [
      {
        begin: "\\G(?=\\()"
        end: "$"
        name: "stuff.tag.style.pug"
        patterns: [
          {
            include: "#tag_attributes"
          }
        ]
      }
      {
        begin: "\\G(?=[.#])"
        end: "$"
        name: "stuff.tag.style.pug"
        patterns: [
          {
            include: "#complete_tag"
          }
        ]
      }
      {
        include: "source.css.sass"
      }
      {
        include: "source.sass"
      }
    ]
  }
  {
    comment: "Style tag with Less code."
    begin: "^(\\s*)(style)(?=[.#(\\s])(?=[^\\n]*type=['\"](?:text/)?(?:x-)?less['\"])"
    beginCaptures:
      "2":
        name: "entity.name.tag.script.pug"
    end: "^(?!(\\1\\s)|\\s*$)"
    name: "source.script.pug"
    patterns: [
      {
        begin: "\\G(?=\\()"
        end: "$"
        name: "stuff.tag.style.pug"
        patterns: [
          {
            include: "#tag_attributes"
          }
        ]
      }
      {
        begin: "\\G(?=[.#])"
        end: "$"
        name: "stuff.tag.style.pug"
        patterns: [
          {
            include: "#complete_tag"
          }
        ]
      }
      {
        include: "source.css.less"
      }
      {
        include: "source.less"
      }
    ]
  }
  {
    comment: "Style tag with Stylus code."
    begin: "^(\\s*)(style)(?=[.#(\\s])(?=[^\\n]*type=['\"](?:text/)?(?:x-)?stylus['\"])"
    beginCaptures:
      "2":
        name: "entity.name.tag.script.pug"
    end: "^(?!(\\1\\s)|\\s*$)"
    name: "source.script.pug"
    patterns: [
      {
        begin: "\\G(?=\\()"
        end: "$"
        name: "stuff.tag.style.pug"
        patterns: [
          {
            include: "#tag_attributes"
          }
        ]
      }
      {
        begin: "\\G(?=[.#])"
        end: "$"
        name: "stuff.tag.style.pug"
        patterns: [
          {
            include: "#complete_tag"
          }
        ]
      }
      {
        include: "source.css.stylus"
      }
      {
        include: "source.stylus"
      }
    ]
  }
  {
    begin: "^(\\s*):(markdown)(?=\\(|$)$"
    beginCaptures:
      "2":
        name: "constant.language.name.markdown.filter.pug"
    end: "^(?!(\\1\\s)|\\s*$)"
    name: "text.markdown.filter.pug"
    patterns: [
      {
        include: "#filter_args"
      }
      {
        include: "text.html.markdown"
      }
    ]
  }
  {
    begin: "^(\\s*):(sass)(?=\\(|$)$"
    beginCaptures:
      "2":
        name: "constant.language.name.sass.filter.pug"
    end: "^(?!(\\1\\s)|\\s*$)"
    name: "source.sass.filter.pug"
    patterns: [
      {
        include: "#filter_args"
      }
      {
        include: "source.css.sass"
      }
      {
        include: "source.sass"
      }
    ]
  }
  {
    begin: "^(\\s*):(less)(?=\\(|$)$"
    beginCaptures:
      "2":
        name: "constant.language.name.less.filter.pug"
    end: "^(?!(\\1\\s)|\\s*$)"
    name: "source.less.filter.pug"
    patterns: [
      {
        include: "#filter_args"
      }
      {
        include: "source.css.less"
      }
      {
        include: "source.less"
      }
    ]
  }
  {
    begin: "^(\\s*):(stylus)(?=\\(|$)$"
    beginCaptures:
      "2":
        name: "constant.language.name.stylus.filter.pug"
    end: "^(?!(\\1\\s)|\\s*$)"
    name: "source.stylus.filter.pug"
    patterns: [
      {
        include: "#filter_args"
      }
      {
        include: "source.css.stylus"
      }
      {
        include: "source.stylus"
      }
    ]
  }
  {
    comment: "Generic pug filter."
    begin: "^(\\s*)((:(?=.))|(:$))"
    beginCaptures:
      "4":
        name: "invalid.illegal.empty.generic.filter.pug"
    end: "^(?!(\\1\\s)|\\s*$)"
    name: "text.generic.filter.pug"
    patterns: [
      {
        begin: "\\G(?<=:)(?=.)"
        end: "$"
        name: "name.generic.filter.pug"
        patterns: [
          {
            match: "\\G\\("
            name: "invalid.illegal.name.generic.filter.pug"
          }
          {
            match: "\\w"
            name: "constant.language.name.generic.filter.pug"
          }
          {
            include: "#filter_args"
          }
          {
            match: "\\W"
            name: "invalid.illegal.name.generic.filter.pug"
          }
        ]
      }
    ]
  }
  {
    comment: "Generated from dot_block_tag.py"
    begin: "^(\\s*)(?=[\\w.#].*?\\.$)(?=(?:(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\'\\\"]*(?:(?:\\'(?:[^\\']|(?:(?<!\\\\)\\\\\\'))*\\')|(?:\\\"(?:[^\\\"]|(?:(?<!\\\\)\\\\\\\"))*\\\")))*[^()]*\\))*)*)(?:(?:(?::\\s+)|(?<=\\)))(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\'\\\"]*(?:(?:\\'(?:[^\\']|(?:(?<!\\\\)\\\\\\'))*\\')|(?:\\\"(?:[^\\\"]|(?:(?<!\\\\)\\\\\\\"))*\\\")))*[^()]*\\))*)*))*)\\.$)(?:(?:(#[\\w-]+)|(\\.[\\w-]+))|((?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))"
    beginCaptures:
      "2":
        name: "constant.id.tag.pug"
      "3":
        name: "constant.language.js"
      "4":
        name: "source.script.pug entity.name.tag.pug"
    end: "^(?!(\\1\\s)|\\s*$)"
    patterns: [
      {
        include: "#tag_attributes"
      }
      {
        include: "#complete_tag"
      }
      {
        begin: "^(?=.)"
        end: "$"
        name: "text.block.pug"
        patterns: [
          {
            include: "#inline_pug"
          }
          {
            include: "#embedded_html"
          }
          {
            include: "#html_entity"
          }
          {
            include: "#interpolated_value"
          }
          {
            include: "#interpolated_error"
          }
        ]
      }
    ]
  }
  {
    comment: "All constructs that generally span a single line starting with any number of white-spaces."
    begin: "^\\s*"
    end: "$"
    patterns: [
      {
        include: "#unbuffered_comments"
      }
      {
        include: "#buffered_comments"
      }
      {
        include: "#unbuffered_code_block"
      }
      {
        include: "#inline_pug"
      }
      {
        include: "#blocks_and_includes"
      }
      {
        include: "#unbuffered_code"
      }
      {
        include: "#mixin_definition"
      }
      {
        include: "#mixin_call"
      }
      {
        include: "#flow_control"
      }
      {
        include: "#case_when"
      }
      {
        include: "#case_default"
      }
      {
        begin: "\\|"
        comment: "Tag pipe text line."
        end: "$"
        name: "text.block.pipe.pug"
        patterns: [
          {
            include: "#inline_pug"
          }
          {
            include: "#embedded_html"
          }
          {
            include: "#html_entity"
          }
          {
            include: "#interpolated_value"
          }
          {
            include: "#interpolated_error"
          }
        ]
      }
      {
        include: "#printed_expression"
      }
      {
        begin: "\\G(?=(#[^\\{\\w-])|[^\\w.#])"
        comment: "Line starting with characters incompatible with tag name/id/class is standalone text."
        end: "$"
        patterns: [
          {
            begin: "</?(?=[!#])"
            end: ">|$"
            patterns: [
              {
                include: "#inline_pug"
              }
              {
                include: "#interpolated_value"
              }
              {
                include: "#interpolated_error"
              }
            ]
          }
          {
            include: "#inline_pug"
          }
          {
            include: "#embedded_html"
          }
          {
            include: "#html_entity"
          }
          {
            include: "#interpolated_value"
          }
          {
            include: "#interpolated_error"
          }
        ]
      }
      {
        include: "#embedded_html"
      }
      {
        include: "#complete_tag"
      }
    ]
  }
]
repository:

  unbuffered_comments:
    comment: "Unbuffered (pug-only) comments."
    begin: "^(\\s*)//-"
    end: "^(?!(\\1\\s)|\\s*$)"
    name: "comment.unbuffered.block.pug"

  buffered_comments:
    comment: "Buffered (html) comments."
    begin: "^(\\s*)//"
    end: "^(?!(\\1\\s)|\\s*$)"
    name: "string.comment.buffered.block.pug"
    patterns: [
      {
        comment: "Buffered comments inside buffered comments will generate invalid html."
        captures:
          "1":
            name: "invalid.illegal.comment.comment.block.pug"
        match: "^\\s*(//)(?!-)"
        name: "string.comment.buffered.block.pug"
      }
    ]

  blocks_and_includes:
    comment: "Template blocks and includes."
    captures:
      "1":
        name: "storage.type.import.include.pug"
      "4":
        name: "variable.control.import.include.pug"
    match: "(extends|include|yield|append|prepend|block( (append|prepend))?)\\s+(.*)$"
    name: "meta.first-class.pug"

  case_when:
    match: "(when)\\s+([^:]+)(:\\s+|$)"
    captures:
      "1": name: "keyword.control.case"
      "2": patterns: [include: "source.moon"]
      "3": name: "meta.constant.punctuation"

  case_default:
    match: "(default)(:\\s+|$)"
    captures:
      "1": name: "keyword.control.default"
      "2": name: "meta.constant.punctuation"

  complete_tag:
    begin: "(?=[\\w.#])|(:\\s*)"
    beginCaptures:
      "0": name: "meta.constant.operator"
    end: "(\\.?$)|(?=:.)"
    endCaptures:
      "0": name: "meta.constant.operator"
    patterns: [
      {
        include: "#blocks_and_includes"
      }
      {
        include: "#unbuffered_code"
      }
      {
        include: "#mixin_call"
      }
      {
        include: "#flow_control"
      }
      {
        match: "(?<=:)\\w.*$"
        name: "invalid.illegal.name.tag.pug"
      }
      {
        include: "#tag_head"
      }
      {
        captures:
          "2":
            name: "invalid.illegal.end.tag.pug"
          "4":
            name: "invalid.illegal.end.tag.pug"
        match: "((\\.)\\s+$)|((:)\\s*$)"
      }
      {
        include: "#printed_expression"
      }
      {
        include: "#tag_text"
      }
    ]

  embedded_html:
    begin: "(?=<[^>]*>)"
    end: "$|(?=>)"
    patterns: [
      {
        include: "text.html.basic"
      }
      {
        include: "#interpolated_value"
      }
      {
        include: "#interpolated_error"
      }
    ]

  filter_args:
    begin: "\\G(\\()"
    captures:
      "1":
        name: "meta.args.filter.pug"
      "2":
        name: "invalid.illegal.extra.args.filter.pug"
    end: "(\\))(.*?$)"
    name: "args.filter.pug"
    patterns: [
      {
        begin: "([^\\s(),=]+)(=?)"
        beginCaptures:
          "1":
            name: "entity.other.attribute-name.tag.pug"
          "2":
            name: "punctuation.separator.key-value.pug"
        contentName: "string.value.args.filter.pug"
        end: "((?=\\))|,|$)"
        patterns: [
          {
            include: "#filter_args_paren"
          }
        ]
      }
    ]

  filter_args_paren:
    begin: "\\("
    end: "\\)|$"
    patterns: [
      {
        include: "#filter_args_paren"
      }
    ]

  flow_control:
    comment: "pug flow control"
    match: "(for|if|else if|else|each|until|while|unless|case)\\s+(.*)"
    captures:
      "1":
        name: "pug.meta.keyword.control"
      "2":
        patterns: [
          {include: "source.moon#expression"}
        ]

  html_entity:
    patterns: [
      {
        match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
        name: "constant.character.entity.html.text.pug"
      }
      {
        match: "[<>&]"
        name: "invalid.illegal.html_entity.text.pug"
      }
    ]

  inline_pug:
    begin: "(?<!\\\\)(#\\[)"
    captures:
      "1":
        name: "entity.name.function.pug"
      "2":
        name: "entity.name.function.pug"
    end: "(\\])"
    name: "inline.pug"
    patterns: [
      {
        include: "#inline_pug"
      }
      {
        include: "#mixin_call"
      }
      {
        begin: "(?<!\\])(?=[\\w.#])|(:\\s*)"
        end: "(?=\\]|(:.)|=|\\s)"
        name: "tag.inline.pug"
        patterns: [
          {
            include: "#tag_head"
          }
          {
            include: "#inline_pug"
          }
          {
            match: "\\["
            name: "invalid.illegal.tag.pug"
          }
        ]
      }
      {
        include: "#unbuffered_code"
      }
      {
        include: "#printed_expression"
      }
      {
        match: "\\["
        name: "invalid.illegal.tag.pug"
      }
      {
        include: "#inline_pug_text"
      }
    ]

  inline_pug_text:
    begin: ""
    end: "(?=\\])"
    patterns: [
      {
        begin: "\\["
        end: "\\]"
        patterns: [
          {
            include: "#inline_pug_text"
          }
        ]
      }
      {
        include: "#inline_pug"
      }
      {
        include: "#embedded_html"
      }
      {
        include: "#html_entity"
      }
      {
        include: "#interpolated_value"
      }
      {
        include: "#interpolated_error"
      }
    ]

  interpolated_error:
    match: "(?<!\\\\)[#!]\\{(?=[^}]*$)"
    name: "invalid.illegal.tag.pug"

  interpolated_value:
    begin: "(?<!\\\\)[#!]\\{(?=.*?\\})"
    end: "\\}"
    name: "string.interpolated.pug"
    patterns: [
      {
        match: "{"
        name: "invalid.illegal.tag.pug"
      }
      {include: "source.moon#expression"}
    ]

  mixin_call:
    name: "meta.mixin-call.pug"
    begin: "(\\+)([\\w-]+)"
    beginCaptures:
      "1": name: "meta.operator.constant"
      "2": name: "entity.function.name.pug"
    end: "(?!\\()|$"
    patterns: [
      {
        name: "meta.arguments.pug"
        begin: "\\("
        captures:
          "0": name: "constant.bracket.round.pug"
        end: "\\)"
        patterns: [
          {include: "#string"}
          {
            match: "([^\\s(),=/]+)\\s*=\\s*"
            captures:
              "1": name: "entity.other.attribute-name.tag.pug"
          }
          {include: "source.moon#expression"}
        ]
      }
      {
        include: "#tag_attributes"
      }
    ]

  mixin_definition:
    name: "entity.mixin"
    match: "(mixin\\s+)([\\w-]+)(?:(\\()\\s*((?:[a-zA-Z_]\\w*\\s*)(?:,\\s*[a-zA-Z_]\\w*\\s*)*)(\\)))?$"
    captures:
      "1":
        name: "storage.type.function.pug"
      "2":
        name: "entity.function.name.pug"
      "3":
        name: "constant.bracket.round.pug"
      "4":
        name: "function.parameter"
      "5":
        name: "constant.bracket.round.pug"

  printed_expression:
    match: "(!?\\=)\\s*(.*)$"
    captures:
      "1":
        name: "meta.operator.constant.expr"
      "2":
        patterns: [
          {include: "source.moon#expression"}
        ]

  expression:
    patterns: [
      {include: "source.moon#expression"}
    ]

  string:
    begin: "(['\"])"
    end: "(?<!\\\\)\\1"
    name: "string.quoted.pug"
    patterns: [
      {
        match: "\\\\((x[0-9a-fA-F]{2})|(u[0-9]{4})|.)"
        name: "constant.character.quoted.pug"
      }
      {
        include: "#interpolated_value"
      }
      {
        include: "#interpolated_error"
      }
    ]

  tag_attribute_name:
    captures:
      "1":
        name: "entity.other.attribute-name.tag.pug"
    match: "([^\\s(),=/!]+)\\s*"

  tag_attribute_name_paren:
    begin: "\\(\\s*"
    end: "\\)"
    name: "entity.other.attribute-name.tag.pug"
    patterns: [
      {
        include: "#tag_attribute_name_paren"
      }
      {
        include: "#tag_attribute_name"
      }
    ]

  tag_attributes:
    begin: "\\(\\s*"
    captures:
      "0": name: "constant.bracket.round.pug"
    end: "\\)"
    patterns: [
      {
        include: "#tag_attribute_name_paren"
      }
      {
        include: "#tag_attribute_name"
      }
      {
        match: "!(?!=)"
        name: "invalid.illegal.tag.pug"
      }
      {
        name: "attribute_value"
        begin: "=\\s*"
        end: "$|(?=\\s+[a-zA-Z\\$_]\\w*(\\.\\w+)*\\=)|(?=,|\\))"
        patterns: [
          {include: "#expression"}
        ]
      }
    ]

  tag_mixin_attributes:
    begin: "&attributes(\\()"
    captures:
      "1": name: "constant.bracket.round.tag.pug"
    end: "(\\))"
    name: "attributes.function.pug"
    patterns: [
      {include: "source.moon#expression"}
    ]

  tag_head:
    patterns: [
      {include: "#tag_name"}
      {include: "#tag_id"}
      {include: "#tag_classes"}
      {include: "#tag_attributes"}
      {include: "#tag_mixin_attributes"}
    ]

  tag_name:
    patterns: [
      {
        name: "entity.tag.name.interpolated.pug"
        begin: "#\\{"
        end: "\\}"
        beginCaptures:
          "0": name: "punctuation.begin"
        endCaptures:
          "0": name: "punctuation.end"
        patterns: [
          {include: "source.moon"}
          {include: "source.moon#variable_name"}
        ]
      }
      {
        name: "entity.tag.name.pug"
        match: "(\\w(?:[\\w:-]+[\\w-]|[\\w-]*))"
      }
    ]

  tag_id:
    name: "entity.tag.id.pug"
    match: "#[\\w-]+"

  tag_classes:
    name: "entity.tag.class.pug"
    match: "\\.([^\\w-])?[\\w-]*"
    captures:
      "1": name: "invalid.illegal.tag.pug"

  tag_text:
    begin: "(?=.)"
    end: "$"
    patterns: [
      {
        include: "#inline_pug"
      }
      {
        include: "#embedded_html"
      }
      {
        include: "#html_entity"
      }
      {
        include: "#interpolated_value"
      }
      {
        include: "#interpolated_error"
      }
    ]

  unbuffered_code:
    comment: "Unbuffered code, one-liner"
    begin: "-"
    beginCaptures:
      "0": name: "meta.operator.constant"
    end: "(?=\\])|$"
    patterns: [
      {include: "source.moon"}
    ]

  unbuffered_code_block:
    comment: "Unbuffered code, multi-line"
    begin: "^(\\s*)(-)(?:\r|\n)"
    beginCaptures:
      "2": name: "meta.operator.constant"
    end: "^(?!(\\1\\s)|\\s*$)"
    patterns: [
      {include: "source.moon"}
    ]
